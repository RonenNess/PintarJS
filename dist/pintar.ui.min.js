(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.PintarJS||(g.PintarJS={})).UI=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){"use strict";module.exports={TopLeft:"TopLeft",TopCenter:"TopCenter",TopRight:"TopRight",CenterLeft:"CenterLeft",Center:"Center",CenterRight:"CenterRight",BottomLeft:"BottomLeft",BottomCenter:"BottomCenter",BottomCenterRight:"BottomCenterRight",Auto:"Auto",AutoInline:"AutoInline",Fixed:"Fixed"}},{}],2:[function(require,module,exports){"use strict";const UIElement=require("./ui_element");const PintarJS=require("./pintar");const SidesProperties=require("./sides_properties");const SizeModes=require("./size_modes");const Anchors=require("./anchors");const Panel=require("./panel");class Container extends UIElement{constructor(theme,skin){super();var options=this.getOptionsFromTheme(theme,skin);this.setBaseOptions(options);this._children=[];this.padding=options.padding||new SidesProperties(10,10,10,10);this.paddingMode=options.paddingMode||SizeModes.Pixels;this.__background=null;if(options.background){this.background=new Panel(theme,options.background)}}get background(){return this.__background}set background(backgroundElement){if(this.__background){this.__background._setParent(null)}backgroundElement._setParent(this);backgroundElement.ignoreParentPadding=true;this.__background=backgroundElement}addChild(element){if(element.parent){throw new Error("Element to add already have a parent!")}this._children.push(element);element._setParent(this)}removeChild(element){if(element.parent!==this){throw new Error("Element to remove does not belong to this container!")}var index=this._children.indexOf(element);if(index!==-1){this._children.splice(index,1);element._setParent(null)}}getInternalBoundingBox(){var ret=this.getBoundingBox();var padding=this._convertSides(this.padding);ret.x+=padding.left;ret.y+=padding.top;ret.width-=padding.right+padding.left;ret.height-=padding.bottom+padding.top;return ret}draw(pintar){if(this.background){this.background.draw(pintar)}for(var i=0;i<this._children.length;++i){this._children[i].draw(pintar)}}update(input){super.update(input);if(this.background){this.background.update(input);this.background.size=this.size}var lastElement=null;for(var i=0;i<this._children.length;++i){var element=this._children[i];var needToSetAuto=false;if(element.anchor===Anchors.AutoInline){if(lastElement){var marginX=Math.max(element.margin.left,lastElement.margin.right);var marginY=Math.max(element.margin.top,lastElement.margin.bottom);element.offset.set(lastElement.offset.x+lastElement.size.x+marginX,lastElement.offset.y+lastElement.size.y+marginY);if(element.offset.x>this.size.x){needToSetAuto=true}}else{var padding=this._convertSides(this.padding);element.offset.set(Math.max(element.margin.left-padding.left,0),Math.max(element.margin.top-padding.top,0))}}if(needToSetAuto||element.anchor===Anchors.Auto){if(lastElement){var marginY=Math.max(element.margin.top,lastElement.margin.bottom);var marginX=Math.max(element.margin.left-padding.left,0);element.offset.set(marginX,lastElement.offset.y+lastElement.size.y+marginY)}else{var padding=this._convertSides(this.padding);element.offset.set(Math.max(element.margin.left-padding.left,0),Math.max(element.margin.top-padding.top,0))}}element.update(input);lastElement=element}}}module.exports=Container},{"./anchors":1,"./panel":6,"./pintar":8,"./sides_properties":11,"./size_modes":12,"./ui_element":15}],3:[function(require,module,exports){"use strict";const UIElement=require("./ui_element");const PintarJS=require("./pintar");const SizeModes=require("./size_modes");class HorizontalLine extends UIElement{constructor(theme,skin,override){super();var options=this.getOptionsFromTheme(theme,skin,override);this.setBaseOptions(options);this.size.x=100;this.size.xMode=SizeModes.Percents;var textureScale=options.textureScale||1;this.size.y=options.middleSourceRect.height*textureScale;this.size.yMode=SizeModes.Pixels;var leftSideSourceRect=options.leftEdgeSourceRect;if(leftSideSourceRect){this.leftEdgeSprite=new PintarJS.Sprite(options.texture);this.leftEdgeSprite.sourceRectangle=leftSideSourceRect;this.leftEdgeSprite.size.set(leftSideSourceRect.width*textureScale,leftSideSourceRect.height*textureScale)}var rightSideSourceRect=options.rightEdgeSourceRect;if(rightSideSourceRect){this.rightEdgeSprite=new PintarJS.Sprite(options.texture);this.rightEdgeSprite.sourceRectangle=rightSideSourceRect;this.rightEdgeSprite.size.set(rightSideSourceRect.width*textureScale,rightSideSourceRect.height*textureScale)}this.middleSprite=new PintarJS.Sprite(options.texture);this.middleSprite.sourceRectangle=options.middleSourceRect;this.middleSprite.size.set(options.middleSourceRect.width*textureScale,options.middleSourceRect.height*textureScale)}get requiredOptions(){return["texture","middleSourceRect"]}draw(pintar){var destRect=this.getBoundingBox();if(this.leftEdgeSprite){this.leftEdgeSprite.position.set(destRect.x,destRect.y);pintar.drawSprite(this.leftEdgeSprite)}if(this.rightEdgeSprite){this.rightEdgeSprite.position.set(destRect.right-this.rightEdgeSprite.width,destRect.y);pintar.drawSprite(this.rightEdgeSprite)}}}module.exports=HorizontalLine},{"./pintar":8,"./size_modes":12,"./ui_element":15}],4:[function(require,module,exports){var UI={UIRoot:require("./root"),UIElement:require("./ui_element"),ProgressBar:require("./progress_bar"),InputManager:require("./input_manager"),Container:require("./container"),Anchors:require("./anchors"),SlicedSprite:require("./sliced_sprite"),SizeModes:require("./size_modes"),SidesProperties:require("./sides_properties"),Panel:require("./panel"),Paragraph:require("./paragraph"),HorizontalLine:require("./horizontal_line"),Sprite:require("./sprite"),UIPoint:require("./ui_point")};const pintar=require("./pintar");pintar.UI=UI;module.exports=UI},{"./anchors":1,"./container":2,"./horizontal_line":3,"./input_manager":5,"./panel":6,"./paragraph":7,"./pintar":8,"./progress_bar":9,"./root":10,"./sides_properties":11,"./size_modes":12,"./sliced_sprite":13,"./sprite":14,"./ui_element":15,"./ui_point":16}],5:[function(require,module,exports){"use strict";const PintarJS=require("./pintar");class InputManager{constructor(pintar){var canvas=this._canvas=pintar._canvas;this._mouseButtons={0:false,1:false,2:false};this._mouseClicks={0:false,1:false,2:false};this._mouseWheel=0;this._mouseDownEventListener=(e=>{this._mouseButtons[e.button]=true});canvas.addEventListener("mousedown",this._mouseDownEventListener);this._mouseUpEventListener=(e=>{if(this._mouseButtons[e.button]){this._mouseClicks[e.button]=true}this._mouseButtons[e.button]=false});canvas.addEventListener("mouseup",this._mouseUpEventListener);this._mouseLeaveEventListener=(e=>{this._mouseButtons[0]=this._mouseButtons[1]=this._mouseButtons[2]=false});canvas.addEventListener("mouseleave",this._mouseLeaveEventListener);this._mouseWheelEventListener=(e=>{this._mouseWheel=e.deltaY});canvas.addEventListener("mousewheel",this._mouseWheelEventListener);this._mouseMoveEventListener=(e=>{this._mousePosition=new PintarJS.Point(e.offsetX,e.offsetY)});canvas.addEventListener("mousemove",this._mouseMoveEventListener)}cleanup(){canvas.removeEventListener("mousedown",this._mouseDownEventListener);canvas.removeEventListener("mouseup",this._mouseUpEventListener);canvas.removeEventListener("mouseleave",this._mouseLeaveEventListener);canvas.removeEventListener("mousewheel",this._mouseWheelEventListener);canvas.removeEventListener("mousemove",this._mouseMoveEventListener)}startUpdate(){var timeNow=(new Date).getTime();this._deltaTime=this._prevTime?(timeNow-this._prevTime)/1e3:.1;this._prevTime=timeNow}endUpdate(){this._mouseWheel=0;this._mouseClicks[0]=this._mouseClicks[1]=this._mouseClicks[2]=false}get mousePosition(){return this._mousePosition.clone()}get leftMouseDown(){return this._mouseButtons[0]}get rightMouseDown(){return this._mouseButtons[2]}get leftMouseClick(){return this._mouseClick[0]}get rightMouseClick(){return this._mouseClick[2]}get mouseWheelChange(){return this._mouseWheel}get deltaTime(){return this._deltaTime}}module.exports=InputManager},{"./pintar":8}],6:[function(require,module,exports){"use strict";const PintarJS=require("./pintar");const SlicedSprite=require("./sliced_sprite");class Panel extends SlicedSprite{constructor(theme,skin,override){super(theme,skin||"default",override)}get requiredOptions(){return["texture","externalSourceRect","internalSourceRect"]}}module.exports=Panel},{"./pintar":8,"./sliced_sprite":13}],7:[function(require,module,exports){"use strict";const UIElement=require("./ui_element");const PintarJS=require("./pintar");const SizeModes=require("./size_modes");class Paragraph extends UIElement{constructor(theme,skin,override){super();var options=this.getOptionsFromTheme(theme,skin,override);this.setBaseOptions(options);this.size.x=100;this.size.xMode=SizeModes.Percents;this.enableLineBreaking=true;this.textSprite=new PintarJS.TextSprite("");this.textSprite.useStyleCommands=Boolean(options.useStyleCommands);if(options.font!==undefined){this.textSprite.font=options.font}if(options.fontSize!==undefined){this.textSprite.fontSize=options.fontSize}if(options.alignment!==undefined){this.textSprite.alignment=options.alignment}if(options.fillColor!==undefined){this.textSprite.color=options.fillColor}if(options.strokeColor!==undefined){this.textSprite.strokeColor=options.strokeColor}if(options.strokeWidth!==undefined){this.textSprite.strokeWidth=options.strokeWidth}this.autoSetHeight=true}get text(){return this.textSprite.text}set text(text){this.textSprite.text=text}get requiredOptions(){return[]}draw(pintar){var destRect=this.getBoundingBox();var position=destRect.getPosition();position.y+=this.textSprite.fontSize;this.textSprite.position=position;this.textSprite.maxWidth=this.enableLineBreaking?destRect.width:0;pintar.drawText(this.textSprite);if(this.autoSetHeight){this.size.yMode=SizeModes.Pixels;this.size.y=this.textSprite.calculatedHeight}}}module.exports=Paragraph},{"./pintar":8,"./size_modes":12,"./ui_element":15}],8:[function(require,module,exports){var pintar=window.PintarJS||window.pintar;if(!pintar){throw new Error("Missing PintarJS main object.")}module.exports=pintar},{}],9:[function(require,module,exports){"use strict";const UIElement=require("./ui_element");const PintarJS=require("./pintar");const SlicedSprite=require("./sliced_sprite");const Sprite=require("./sprite");const Anchors=require("./anchors");const SizeModes=require("./size_modes");const Utils=require("./utils");class ProgressBar extends UIElement{constructor(theme,skin,override){super();var options=this.getOptionsFromTheme(theme,skin,override);this.setBaseOptions(options);if(options.foregroundSourceRect&&(options.foregroundExternalSourceRect||options.foregroundInternalSourceRect)){throw new Error("Option 'foregroundSourceRect' cannot appear with options 'foregroundExternalSourceRect' or 'foregroundInternalSourceRect'!")}if(options.fillSourceRect&&(options.fillInternalSourceRect||options.fillExternalSourceRect)){throw new Error("Option 'fillSourceRect' cannot appear with options 'fillInternalSourceRect' or 'fillExternalSourceRect'!")}if(options.backgroundSourceRect&&(options.backgroundInternalSourceRect||options.backgroundExternalSourceRect)){throw new Error("Option 'backgroundSourceRect' cannot appear with options 'backgroundInternalSourceRect' or 'backgroundExternalSourceRect'!")}this.fillOffset=options.fillOffset||PintarJS.Point.zero();var textureScale=options.textureScale||1;if(options.backgroundSourceRect){this.backgroundSprite=new Sprite({texture:options.texture,sourceRect:options.backgroundSourceRect,textureScale:textureScale})}else if(options.backgroundExternalSourceRect){this.backgroundSprite=new SlicedSprite({texture:options.texture,externalSourceRect:options.backgroundExternalSourceRect,internalSourceRect:options.backgroundInternalSourceRect,textureScale:textureScale})}else{throw new Error("Progress bars must have a background sprite!")}this.backgroundSprite.color=options.backgroundColor||PintarJS.Color.white();this.backgroundSprite.anchor=Anchors.Fixed;if(options.fillSourceRect){this.spriteFillSourceRect=options.fillSourceRect;this.fillSprite=new Sprite({texture:options.texture,sourceRect:options.fillSourceRect,textureScale:textureScale})}else if(options.fillExternalSourceRect){this.fillSprite=new SlicedSprite({texture:options.texture,externalSourceRect:options.fillExternalSourceRect,internalSourceRect:options.fillInternalSourceRect,textureScale:textureScale})}else{throw new Error("Missing progressbar fill part source rect!")}var fillRect=options.fillExternalSourceRect||options.fillSourceRect;var backRect=options.backgroundExternalSourceRect||options.backgroundSourceRect;this.fillSprite.color=options.fillColor||PintarJS.Color.white();this.fillSprite.anchor=Anchors.Fixed;this.fillWidthToRemove=backRect?Math.round(backRect.width-fillRect.width):0;this.fillHeightToRemove=backRect?Math.round(backRect.height-fillRect.height):0;if(options.foregroundSourceRect){this.foregroundSprite=new Sprite({texture:options.texture,sourceRect:options.foregroundSourceRect,textureScale:textureScale})}else if(options.foregroundExternalSourceRect){this.foregroundSprite=new SlicedSprite({texture:options.texture,externalSourceRect:options.foregroundExternalSourceRect,internalSourceRect:options.foregroundInternalSourceRect,textureScale:textureScale})}if(this.foregroundSprite){this.foregroundSprite.color=options.foregroundColor||PintarJS.Color.white();this.foregroundSprite.anchor=Anchors.Fixed}this.fillPartAnchor=options.fillAnchor||Anchors.TopLeft;if(options.fillSourceRect){this.size.y=options.fillSourceRect.height*textureScale;this.size.x=options.fillSourceRect.width*textureScale}else{this.size.y=options.height||(backRect||fillRect).height*textureScale;this.size.x=100;this.size.xMode=SizeModes.Percents}this.animationSpeed=options.animationSpeed||0;if(options.valueSetWidth===undefined){options.valueSetWidth=true}this.setWidth=Boolean(options.valueSetWidth);this.setHeight=Boolean(options.valueSetHeight);this._displayValue=this.value=0}get requiredOptions(){return["texture"]}get fillColor(){return this.fillSprite.color}set fillColor(color){this.fillSprite.color=color}get fillBlendMode(){return this.fillSprite.blendMode}set fillBlendMode(blendMode){this.fillSprite.blendMode=blendMode}draw(pintar){var dest=this.getBoundingBox();this.backgroundSprite.offset=dest.getPosition();this.backgroundSprite.size=dest.getSize();this.backgroundSprite.draw(pintar);var textureScaleX=this.backgroundSprite.size.x/this.backgroundSprite.sourceRectangle.width;var textureScaleY=this.backgroundSprite.size.y/this.backgroundSprite.sourceRectangle.height;var value=this._displayValue;if(value>0){this.fillSprite.size.x=(this.backgroundSprite.size.x-this.fillWidthToRemove*textureScaleX)*(this.setWidth?value:1);this.fillSprite.size.y=(this.backgroundSprite.size.y-this.fillHeightToRemove*textureScaleY)*(this.setHeight?value:1);this.fillSprite.offset=this.getDestTopLeftPositionForRect(dest,this.fillSprite.size,this.fillPartAnchor,this.fillOffset);if(this.spriteFillSourceRect){this.fillSprite.sourceRectangle=this.spriteFillSourceRect.clone();if(this.setWidth){this.fillSprite.sourceRectangle.width=(this.backgroundSprite.sourceRectangle.width-this.fillWidthToRemove)*value;if(this.fillPartAnchor.indexOf("right")!==-1){this.fillSprite.sourceRectangle.x=this.spriteFillSourceRect.right-this.fillSprite.sourceRectangle.width}}if(this.setHeight){this.fillSprite.sourceRectangle.height=(this.backgroundSprite.sourceRectangle.height-this.fillHeightToRemove)*value;if(this.fillPartAnchor.indexOf("Bottom")!==-1){this.fillSprite.sourceRectangle.y=this.spriteFillSourceRect.bottom-this.fillSprite.sourceRectangle.height}}}this.fillSprite.draw(pintar)}if(this.foregroundSprite){this.foregroundSprite.offset=dest.getPosition();this.foregroundSprite.size=dest.getSize();this.foregroundSprite.draw(pintar)}}update(input){super.update(input);if(this._displayValue!=this.value){if(!this.animationSpeed){this._displayValue=this.value}else{this._displayValue=Utils.MoveTowards(this._displayValue,this.value,input.deltaTime*this.animationSpeed)}}if(this._displayValue<0)this._displayValue=0;if(this._displayValue>1)this._displayValue=1}}module.exports=ProgressBar},{"./anchors":1,"./pintar":8,"./size_modes":12,"./sliced_sprite":13,"./sprite":14,"./ui_element":15,"./utils":17}],10:[function(require,module,exports){"use strict";const Container=require("./container");const PintarJS=require("./pintar");const InputManager=require("./input_manager");class UIRoot extends Container{constructor(pintar,inputManager){super({UIRoot:{default:{}}});this.pintar=pintar;this.inputManager=inputManager||new InputManager(pintar);this.padding.set(0,0,0,0)}cleanup(){this.inputManager.cleanup()}getBoundingBox(){return this.pintar.canvasRect}getInternalBoundingBox(){return this.pintar.canvasRect}draw(pintar){super.draw(this.pintar)}update(input){this.inputManager.startUpdate();super.update(this.inputManager);this.inputManager.endUpdate()}}module.exports=UIRoot},{"./container":2,"./input_manager":5,"./pintar":8}],11:[function(require,module,exports){"use strict";class SidesProperties{constructor(left,right,top,bottom){this.left=left||0;this.right=right||0;this.top=top||0;this.bottom=bottom||0;this.leftMode=this.rightMode=this.topMode=this.bottomMode="px"}set(left,right,top,bottom){this.left=left;this.right=right;this.top=top;this.bottom=bottom}clone(){var ret=new SidesProperties(this.left,this.right,this.top,this.bottom);ret.leftMode=this.leftMode;ret.rightMode=this.rightMode;ret.topMode=this.topMode;ret.bottomMode=this.bottomMode;return ret}}module.exports=SidesProperties},{}],12:[function(require,module,exports){"use strict";module.exports={Pixels:"px",Percents:"%"}},{}],13:[function(require,module,exports){"use strict";const PintarJS=require("./pintar");const UIElement=require("./ui_element");class SlicedSprite extends UIElement{constructor(options,skin,override){super();if(skin){options=this.getOptionsFromTheme(options,skin,override);this.setBaseOptions(options)}var texture=options.texture;var textureScale=options.textureScale||1;var wholeSourceRect=this.externalSourceRect=options.externalSourceRect;var fillSourceRect=this.internalSourceRect=options.internalSourceRect;var fillMode=options.fillMode||SlicedSprite.FillModes.Tiled;this.leftFrameSourceRect=new PintarJS.Rectangle(wholeSourceRect.x,fillSourceRect.y,fillSourceRect.x-wholeSourceRect.x,fillSourceRect.height);this.rightFrameSourceRect=new PintarJS.Rectangle(fillSourceRect.right,fillSourceRect.y,wholeSourceRect.right-fillSourceRect.right,fillSourceRect.height);this.topFrameSourceRect=new PintarJS.Rectangle(fillSourceRect.x,wholeSourceRect.y,fillSourceRect.width,fillSourceRect.y-wholeSourceRect.y);this.bottomFrameSourceRect=new PintarJS.Rectangle(fillSourceRect.x,fillSourceRect.bottom,fillSourceRect.width,wholeSourceRect.bottom-fillSourceRect.bottom);this.topLeftFrameCornerSourceRect=new PintarJS.Rectangle(wholeSourceRect.x,wholeSourceRect.y,fillSourceRect.x-wholeSourceRect.x,fillSourceRect.y-wholeSourceRect.y);this.topRightFrameCornerSourceRect=new PintarJS.Rectangle(fillSourceRect.right,wholeSourceRect.y,wholeSourceRect.right-fillSourceRect.right,fillSourceRect.y-wholeSourceRect.y);this.bottomLeftFrameCornerSourceRect=new PintarJS.Rectangle(wholeSourceRect.x,fillSourceRect.bottom,fillSourceRect.x-wholeSourceRect.x,wholeSourceRect.bottom-fillSourceRect.bottom);this.bottomRightFrameCornerSourceRect=new PintarJS.Rectangle(fillSourceRect.right,fillSourceRect.bottom,wholeSourceRect.right-fillSourceRect.right,wholeSourceRect.bottom-fillSourceRect.bottom);this.topFrameSprite=new PintarJS.Sprite(texture);this.bottomFrameSprite=new PintarJS.Sprite(texture);this.leftFrameSprite=new PintarJS.Sprite(texture);this.rightFrameSprite=new PintarJS.Sprite(texture);this.topLeftCornerFrameSprite=new PintarJS.Sprite(texture);this.bottomLeftCornerFrameSprite=new PintarJS.Sprite(texture);this.topRightCornerFrameSprite=new PintarJS.Sprite(texture);this.bottomRightCornerFrameSprite=new PintarJS.Sprite(texture);this.fillSprite=new PintarJS.Sprite(texture);this.fillColor=options.fillColor||PintarJS.Color.white();this.frameColor=options.frameColor||PintarJS.Color.white();this.frameScale=textureScale;this.fillScale=textureScale;this.blendMode=PintarJS.BlendModes.AlphaBlend;this.fillMode=fillMode||SlicedSprite.FillModes.Tiled}get requiredOptions(){return["texture","externalSourceRect","internalSourceRect"]}get sourceRectangle(){return this.externalSourceRect}set color(color){this.fillColor=color.clone();this.frameColor=color.clone()}draw(pintar){var destRect=this.getBoundingBox();var scaleFactor=this.absoluteScale;var frameScale=scaleFactor*this.frameScale;var position=destRect.getPosition();destRect.width-=this.bottomRightFrameCornerSourceRect.width*frameScale;destRect.height-=this.bottomRightFrameCornerSourceRect.height*frameScale;if(destRect.width>0&&destRect.height>0){var drawTopAndBottomFrames=(sprite,sourceRect,extraY)=>{if(sourceRect.width==0||sourceRect.height==0){return}sprite.sourceRectangle=sourceRect.clone();sprite.origin=PintarJS.Point.zero();sprite.position=position.clone();sprite.blendMode=this.blendMode;sprite.position.y+=extraY;sprite.position.x+=this.topLeftFrameCornerSourceRect.width*frameScale;sprite.width=sprite.sourceRectangle.width*frameScale;sprite.height=sprite.sourceRectangle.height*frameScale;sprite.color=this.frameColor;var exceededRightSide=false;while(!exceededRightSide){var spriteRight=sprite.position.x+sprite.width;exceededRightSide=spriteRight>=destRect.right;if(exceededRightSide){var toCut=spriteRight-destRect.right;if(toCut>0){sprite.sourceRectangle.width-=Math.round(toCut*(sprite.sourceRectangle.width/sprite.width));sprite.width-=toCut}}pintar.drawSprite(sprite);sprite.position.x+=sprite.width}};drawTopAndBottomFrames(this.topFrameSprite,this.topFrameSourceRect,0);drawTopAndBottomFrames(this.bottomFrameSprite,this.bottomFrameSourceRect,destRect.height);var drawLeftAndRightFrames=(sprite,sourceRect,extraX)=>{if(sourceRect.width==0||sourceRect.height==0){return}sprite.sourceRectangle=sourceRect.clone();sprite.origin=PintarJS.Point.zero();sprite.position=position.clone();sprite.blendMode=this.blendMode;sprite.position.x+=extraX;sprite.position.y+=this.topLeftFrameCornerSourceRect.height*frameScale;sprite.width=sprite.sourceRectangle.width*frameScale;sprite.height=sprite.sourceRectangle.height*frameScale;sprite.color=this.frameColor;var exceededBottomSide=false;while(!exceededBottomSide){var spriteBottom=sprite.position.y+sprite.height;exceededBottomSide=spriteBottom>=destRect.bottom;if(exceededBottomSide){var toCut=spriteBottom-destRect.bottom;if(toCut>0){sprite.sourceRectangle.height-=Math.round(toCut*(sprite.sourceRectangle.height/sprite.height));sprite.height-=toCut}}pintar.drawSprite(sprite);sprite.position.y+=sprite.height}};drawLeftAndRightFrames(this.leftFrameSprite,this.leftFrameSourceRect,0);drawLeftAndRightFrames(this.rightFrameSprite,this.rightFrameSourceRect,destRect.width);var drawFramesCorner=(sprite,sourceRect,posx,posy)=>{if(sourceRect.width==0||sourceRect.height==0){return}sprite.sourceRectangle=sourceRect.clone();sprite.origin=PintarJS.Point.zero();sprite.position=position.clone();sprite.blendMode=this.blendMode;sprite.position.x+=posx;sprite.position.y+=posy;sprite.width=sprite.sourceRectangle.width*frameScale;sprite.height=sprite.sourceRectangle.height*frameScale;sprite.color=this.frameColor;pintar.drawSprite(sprite)};drawFramesCorner(this.topLeftCornerFrameSprite,this.topLeftFrameCornerSourceRect,0,0);drawFramesCorner(this.topRightCornerFrameSprite,this.topRightFrameCornerSourceRect,destRect.width,0);drawFramesCorner(this.bottomLeftCornerFrameSprite,this.bottomLeftFrameCornerSourceRect,0,destRect.height);drawFramesCorner(this.bottomRightCornerFrameSprite,this.bottomRightFrameCornerSourceRect,destRect.width,destRect.height)}if(this.internalSourceRect.width&&this.internalSourceRect.height){var sprite=this.fillSprite;sprite.origin=PintarJS.Point.zero();sprite.position=position.clone();sprite.blendMode=this.blendMode;sprite.position.x+=this.topLeftCornerFrameSprite.width;sprite.position.y+=this.topLeftCornerFrameSprite.height;sprite.width=destRect.width-this.bottomLeftCornerFrameSprite.width;sprite.height=destRect.height-this.bottomLeftCornerFrameSprite.height;sprite.color=this.fillColor;if(this.fillMode===SlicedSprite.FillModes.Stretch){sprite.sourceRectangle=this.internalSourceRect.clone();pintar.drawSprite(sprite)}else if(this.fillMode===SlicedSprite.FillModes.Tiled){var fillScale=scaleFactor*this.fillScale;var fillSize=new PintarJS.Point(Math.max(this.internalSourceRect.width*fillScale,1),Math.max(this.internalSourceRect.height*fillScale,1));sprite.size=fillSize.clone();var startPosition=sprite.position.clone();for(var i=0;i<destRect.width/fillSize.x;++i){sprite.sourceRectangle=this.internalSourceRect.clone();sprite.size.x=fillSize.x;sprite.position.x=startPosition.x+sprite.width*i;if(sprite.position.x>=this.rightFrameSprite.position.x){break}var spriteRight=sprite.position.x+sprite.size.x;if(spriteRight>this.rightFrameSprite.position.x){var toCut=spriteRight-this.rightFrameSprite.position.x;if(toCut>0){sprite.sourceRectangle.width-=Math.round(toCut*(sprite.sourceRectangle.width/sprite.width));sprite.width-=toCut}}if(sprite.width==0){break}for(var j=0;j<destRect.height/fillSize.y;++j){sprite.size.y=fillSize.y;sprite.position.y=startPosition.y+sprite.height*j;if(sprite.position.y>=this.bottomFrameSprite.position.y){break}var spriteBottom=sprite.position.y+sprite.size.y;if(spriteBottom>this.bottomFrameSprite.position.y){var toCut=spriteBottom-this.bottomFrameSprite.position.y;if(toCut>0){sprite.sourceRectangle.height-=Math.round(toCut*(sprite.sourceRectangle.height/sprite.height));sprite.height-=toCut}}if(sprite.height==0){break}pintar.drawSprite(sprite)}}}else if(this.fillMode===SlicedSprite.FillModes.None){}else{throw new Error("Invalid fill mode!")}}}}SlicedSprite.FillModes={Tiled:1,Stretch:2,None:3};module.exports=SlicedSprite},{"./pintar":8,"./ui_element":15}],14:[function(require,module,exports){"use strict";const PintarJS=require("./pintar");const UIElement=require("./ui_element");class Sprite extends UIElement{constructor(options,skin,override){super();if(skin){options=this.getOptionsFromTheme(options,skin,override);this.setBaseOptions(options)}var texture=options.texture;var textureScale=options.textureScale||1;var sourceRect=options.sourceRect;if(options.textureScale&&!sourceRect){throw new Error("When providing 'textureScale' option for UI Sprite you must also provide the sourceRect option!")}this.sprite=new PintarJS.Sprite(texture);if(sourceRect){this.sprite.sourceRectangle=sourceRect.clone();this.size.x=sourceRect.width*textureScale;this.size.y=sourceRect.height*textureScale}}get requiredOptions(){return["texture"]}get color(){return this.sprite.color}set color(val){this.sprite.color=val}get sourceRectangle(){return this.sprite.sourceRectangle}set sourceRectangle(val){this.sprite.sourceRectangle=val}draw(pintar){var destRect=this.getBoundingBox();this.sprite.size.set(destRect.width,destRect.height);this.sprite.position.set(destRect.x,destRect.y);pintar.drawSprite(this.sprite)}}module.exports=Sprite},{"./pintar":8,"./ui_element":15}],15:[function(require,module,exports){"use strict";const PintarJS=require("./pintar");const Anchors=require("./anchors");const SizeModes=require("./size_modes");const Sides=require("./sides_properties");const UIPoint=require("./ui_point");class UIElement{constructor(){this.offset=UIPoint.zero();this.size=new UIPoint(100,"px",100,"px");this.anchor=Anchors.Auto;this.scale=1;this.margin=new Sides(5,5,5,5);this.ignoreParentPadding=false;this.__parent=null}setBaseOptions(options){this.scale=options.scale||this.scale;this.margin=options.margin||this.margin;this.anchor=options.anchor||this.anchor}getOptionsFromTheme(theme,skin,override){var elementName=this.constructor.name;var options=theme[elementName];if(!options){throw new Error("Missing definition for object type '"+elementName+"' in UI theme!")}skin=skin||"default";options=options[skin];if(!options){throw new Error("Missing definition for object type '"+elementName+"' and skin '"+skin+"' in UI theme!")}if(override){var temp={};for(var key in options){temp[key]=options[key]}for(var key in override){temp[key]=override[key]}options=temp}var required=this.requiredOptions;for(var i=0;i<required.length;++i){if(!(required[i]in options)){throw new Error("Missing mandatory option '"+required[i]+"' in element type '"+elementName+"' options!")}}return options}get requiredOptions(){return[]}_setParent(parent){this.__parent=parent}get absoluteScale(){return this.scale*UIElement.globalScale}_convertVal(val,parentSize,mode){switch(mode){case undefined:case SizeModes.Pixels:var scale=this.absoluteScale;return val*scale;case SizeModes.Percents:return val/100*parentSize;default:throw new Error("Invalid size mode!")}}_convertSize(val){var parentSize=val.xMode==SizeModes.Percents||val.yMode==SizeModes.Percents?this.getParentInternalBoundingBox().getSize():{x:0,y:0};return new PintarJS.Point(this._convertVal(val.x,parentSize.x,val.xMode),this._convertVal(val.y,parentSize.y,val.yMode))}_convertSides(val){var ret=val.clone();var parentSize=ret.leftMode==SizeModes.Percents||ret.rightMode==SizeModes.Percents||ret.topMode==SizeModes.Percents||ret.bottomMode==SizeModes.Percents?this.getParentInternalBoundingBox().getSize():{x:0,y:0};ret.left=this._convertVal(ret.left,parentSize.x,ret.leftMode);ret.right=this._convertVal(ret.right,parentSize.x,ret.rightMode);ret.top=this._convertVal(ret.top,parentSize.y,ret.topMode);ret.bottom=this._convertVal(ret.bottom,parentSize.y,ret.bottomMode);return ret}getSizeInPixels(){return this._convertSize(this.size)}getOffsetInPixels(){return this._convertSize(this.offset)}get parent(){return this.__parent}draw(pintar){throw new Error("Not Implemented!")}update(input){}getBoundingBox(){var position=this.getDestTopLeftPosition();var size=this.getSizeInPixels();return new PintarJS.Rectangle(position.x,position.y,size.x,size.y)}getInternalBoundingBox(){return this.getBoundingBox()}getParentInternalBoundingBox(){if(!this.parent){throw new Error("Missing parent element! Did you forget to create a UI root and add elements to it?")}return this.ignoreParentPadding?this.parent.getBoundingBox():this.parent.getInternalBoundingBox()}getDestTopLeftPositionForRect(parentRect,selfSize,anchor,offset){var ret=new PintarJS.Point(0,0);var offsetFactor=new PintarJS.Point(1,1);switch(anchor){case Anchors.TopLeft:case Anchors.Auto:case Anchors.AutoInline:ret.set(parentRect.x,parentRect.y);break;case Anchors.TopCenter:ret.set(parentRect.x+parentRect.width/2-selfSize.x/2,parentRect.y);break;case Anchors.TopRight:ret.set(parentRect.right-selfSize.x,parentRect.y);offsetFactor.x=-1;break;case Anchors.CenterLeft:ret.x=parentRect.x;ret.y=parentRect.y+parentRect.height/2-selfSize.y/2;break;case Anchors.Center:ret.x=parentRect.x+parentRect.width/2-selfSize.x/2;ret.y=parentRect.y+parentRect.height/2-selfSize.y/2;break;case Anchors.CenterRight:ret.x=parentRect.right-selfSize.x;ret.y=parentRect.y+parentRect.height/2-selfSize.y/2;offsetFactor.x=-1;break;case Anchors.BottomLeft:ret.x=parentRect.x;ret.y=parentRect.bottom-selfSize.y;offsetFactor.y=-1;break;case Anchors.BottomCenter:ret.x=parentRect.x+parentRect.width/2-selfSize.x/2;ret.y=parentRect.bottom-selfSize.y;offsetFactor.y=-1;break;case Anchors.BottomRight:ret.x=parentRect.right-selfSize.x;ret.y=parentRect.bottom-selfSize.y;offsetFactor.x=-1;offsetFactor.y=-1;break}if(offset){ret=ret.add(offset.mul(offsetFactor))}return ret}getDestTopLeftPosition(){if(this.anchor===Anchors.Fixed){return this.offset.clone()}var parentRect=this.getParentInternalBoundingBox();var selfSize=this.getSizeInPixels();var offset=this.getOffsetInPixels();if(this.__cachedTopLeftPos&&this.anchor===this.__lastAnchor&&selfSize.equals(this.__lastSize||PintarJS.Point.zero())&&offset.equals(this.__lastOffset||PintarJS.Point.zero())&&parentRect.equals(this.__lastParentRect||new PintarJS.Rectangle)){return this.__cachedTopLeftPos}var ret=this.getDestTopLeftPositionForRect(parentRect,selfSize,this.anchor,offset);this.__cachedTopLeftPos=ret.clone();this.__lastAnchor=this.anchor;this.__lastSize=selfSize;this.__lastOffset=offset;this.__lastParentRect=parentRect.clone();return ret}getCenterPosition(){var bb=this.getBoundingBox();return bb.getCenter()}}UIElement.globalScale=1;module.exports=UIElement},{"./anchors":1,"./pintar":8,"./sides_properties":11,"./size_modes":12,"./ui_point":16}],16:[function(require,module,exports){"use strict";const PintarJS=require("./pintar");const SizeModes=require("./size_modes");class UIPoint extends PintarJS.Point{constructor(x,modeX,y,modeY){super(x,y);this.xMode=modeX||SizeModes.Pixels;this.yMode=modeY||SizeModes.Pixels}clone(){return new UIPoint(this.x,this.xMode,this.y,this.yMode)}equals(other){return other&&this.x==other.x&&this.y==other.y&&this.xMode==other.xMode&&this.yMode==other.yMode}}UIPoint.zero=function(){return new UIPoint(0,"px",0,"px")};UIPoint.one=function(){return new UIPoint(1,"px",1,"px")};UIPoint.half=function(){return new UIPoint(.5,"px",.5,"px")};module.exports=UIPoint},{"./pintar":8,"./size_modes":12}],17:[function(require,module,exports){"use strict";module.exports={lerp:function(start,end,a){return(1-a)*start+a*end},MoveTowards:function(start,end,a){if(start===end){return end}var sign=Math.sign(end-start);var ret=start+sign*a;if(sign>0&&ret>end){ret=end}else if(sign<0&&ret<end){ret=end}return ret}}},{}]},{},[4])(4)});